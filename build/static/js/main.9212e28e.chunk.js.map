{"version":3,"sources":["Component/randomQuote.js","App.js","serviceWorker.js","index.js"],"names":["RandomQuote","props","getNewQuote","getQuote","state","quote","author","this","axios","get","then","res","data","quotes","randomQuote","Math","floor","random","length","setState","Container","Card","className","Body","href","data-toggle","rel","target","id","Button","variant","onClick","Component","App","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gTAgEeA,G,wDAzDX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IA0BVC,YAAc,WACV,EAAKC,YA1BL,EAAKC,MAAQ,CACTC,MAAO,GACPC,OAAQ,IAJG,E,gEASfC,KAAKJ,a,iCAGE,IAAD,OAENK,IAAMC,IADI,0IAELC,MAAK,SAAAC,GACF,IAAIC,EAAOD,EAAIC,KAAKC,OAEhBC,EAAcF,EADHG,KAAKC,MAAMD,KAAKE,SAAWL,EAAKM,SAG/C,EAAKC,SAAS,CACVd,MAAOS,EAAW,MAClBR,OAAOQ,EAAW,c,+BASxB,IAAD,EACqBP,KAAKH,MAAvBC,EADH,EACGA,MAAOC,EADV,EACUA,OACf,OACI,kBAACc,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAMC,UAAU,gCACZ,kBAACD,EAAA,EAAKE,KAAN,KACI,gCAAYD,UAAU,mBACjBjB,EACD,4BAAQiB,UAAU,qBACd,8BAAOhB,MAKnB,kBAACe,EAAA,EAAKE,KAAN,KACI,uBAAGC,KAAI,kDAA6CnB,EAA7C,cAAwDC,GAAUmB,cAAY,mBAAmBC,IAAI,sBAAsBC,OAAO,SAASC,GAAG,eACjJ,uBAAGN,UAAU,0CAElB,kBAACO,EAAA,EAAD,CAAQC,QAAQ,kBAAkBR,UAAU,qBAAqBS,QAASxB,KAAKL,aAA/E,oB,GAlDG8B,cCiBXC,E,kDAnBb,WAAYhC,GAAQ,IAAD,6BACjB,cAAMA,GACNiC,QAAQC,IAAI,oBAFK,E,gEAMjBD,QAAQC,IAAI,4B,+BAKZ,OADAD,QAAQC,IAAI,sBAEV,6BACE,kBAAC,EAAD,W,GAdUH,aCSEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlB,QAAQkB,MAAMA,EAAMC,c","file":"static/js/main.9212e28e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, Card, Container } from 'react-bootstrap'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport axios from 'axios';\r\nimport './quotes.css'\r\n\r\nclass RandomQuote extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            quote: '',\r\n            author: ''\r\n         }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getQuote()\r\n    }\r\n\r\n    getQuote(){\r\n        let url = 'https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json'\r\n        axios.get(url)\r\n            .then(res =>{\r\n                let data = res.data.quotes\r\n                let quoteNum = Math.floor(Math.random() * data.length)\r\n                let randomQuote = data[quoteNum]\r\n\r\n                this.setState({\r\n                    quote: randomQuote['quote'],\r\n                    author:randomQuote['author']\r\n                })\r\n            })\r\n    }\r\n\r\n    getNewQuote = () => {\r\n        this.getQuote()\r\n    }\r\n\r\n    render() { \r\n        const { quote, author } = this.state\r\n        return ( \r\n            <Container>\r\n                <Card className=\"shadow bg-white rounded card\">\r\n                    <Card.Body>\r\n                        <blockquote className=\"blockquote mb-0\">\r\n                            {quote}\r\n                            <footer className=\"blockquote-footer\">\r\n                                <cite>{author}</cite>\r\n                            </footer>\r\n                        </blockquote>\r\n                    </Card.Body>\r\n\r\n                    <Card.Body>\r\n                        <a href={`https://twitter.com/intent/tweet?text= \"${quote}\" -${author}`} data-toggle=\"share on twitter\" rel='noopener noreferrer' target=\"_blank\" id='tweet-quote'>\r\n                            <i className=\"fa fa-twitter twitter-icon fa-2x m-2\" />\r\n                        </a>\r\n                       <Button variant=\"outline-primary\" className=\"float-right button\" onClick={this.getNewQuote}>New Quote</Button>\r\n                     </Card.Body>\r\n                </Card>\r\n            </Container>\r\n         );\r\n    }\r\n}\r\n \r\nexport default RandomQuote;","import React, { Component } from 'react';\r\nimport Quotes from './Component/randomQuote';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    console.log('constructor runs')\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log('componentDidMount runs')\r\n  }\r\n\r\n  render() {\r\n    console.log('render method runs')\r\n    return (\r\n      <div>\r\n        <Quotes />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}